name: Build ImmortalWrt x86/64 with ImageBuilder

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
  schedule:
    - cron: 0 8 * * 5
  watch:
    types: started

env:
  IMAGEBUILDER_URL: https://downloads.immortalwrt.org/releases/24.10.2/targets/x86/64/immortalwrt-imagebuilder-24.10.2-x86-64.Linux-x86_64.tar.zst
  CUSTOM_PACKAGES_CONF: config/packages.conf
  CUSTOM_REPOSITORIES_CONF: config/repositories.conf
  CUSTOM_FILES_PATH: files
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install build-essential libncurses5-dev libncursesw5-dev zlib1g-dev gawk git gettext libssl-dev xsltproc rsync wget unzip python3 -y
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"

    - name: Download ImageBuilder
      run: |
        wget -O imagebuilder.tar.zst $IMAGEBUILDER_URL
        sudo apt-get install -y zstd
        tar --use-compress-program=unzstd -xf imagebuilder.tar.zst
        mv immortalwrt-imagebuilder-* imagebuilder
        cd imagebuilder
        ls -la

    - name: Load custom configuration
      run: |
        cd imagebuilder
        
        # Ê∑ªÂä†Ëá™ÂÆö‰πâËΩØ‰ª∂Ê∫ê
        if [ -f "$GITHUB_WORKSPACE/$CUSTOM_REPOSITORIES_CONF" ]; then
          echo "Ê∑ªÂä†Ëá™ÂÆö‰πâËΩØ‰ª∂Ê∫ê..."
          while IFS= read -r line; do
            # Ë∑≥ËøáÁ©∫Ë°åÂíåÊ≥®ÈáäË°å
            [[ -z "$line" || "$line" =~ ^[[:space:]]*# ]] && continue
            echo "$line" >> repositories.conf
            echo "Ê∑ªÂä†ËΩØ‰ª∂Ê∫ê: $line"
          done < "$GITHUB_WORKSPACE/$CUSTOM_REPOSITORIES_CONF"
        fi
        
        # Êõ¥Êñ∞ËΩØ‰ª∂ÂåÖÂàóË°®
        make info

    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: Prepare packages list
      run: |
        cd imagebuilder
        
        # ËØªÂèñËΩØ‰ª∂ÂåÖÈÖçÁΩÆ
        PACKAGES=""
        REMOVE_PACKAGES=""
        
        if [ -f "$GITHUB_WORKSPACE/$CUSTOM_PACKAGES_CONF" ]; then
          echo "Â§ÑÁêÜËΩØ‰ª∂ÂåÖÈÖçÁΩÆ..."
          while IFS= read -r line; do
            # Ë∑≥ËøáÁ©∫Ë°åÂíåÊ≥®ÈáäË°å
            [[ -z "$line" || "$line" =~ ^[[:space:]]*# ]] && continue
            
            # Â§ÑÁêÜÁßªÈô§ËΩØ‰ª∂ÂåÖÔºà‰ª• - ÂºÄÂ§¥Ôºâ
            if [[ "$line" =~ ^[[:space:]]*- ]]; then
              package=$(echo "$line" | sed 's/^[[:space:]]*-[[:space:]]*//')
              REMOVE_PACKAGES="$REMOVE_PACKAGES -$package"
              echo "ÁßªÈô§ËΩØ‰ª∂ÂåÖ: $package"
            else
              # Â§ÑÁêÜÂÆâË£ÖËΩØ‰ª∂ÂåÖ
              package=$(echo "$line" | sed 's/^[[:space:]]*//' | sed 's/[[:space:]]*$//')
              PACKAGES="$PACKAGES $package"
              echo "ÂÆâË£ÖËΩØ‰ª∂ÂåÖ: $package"
            fi
          done < "$GITHUB_WORKSPACE/$CUSTOM_PACKAGES_CONF"
        fi
        
        # ‰øùÂ≠òÂà∞ÁéØÂ¢ÉÂèòÈáè
        echo "PACKAGES=$PACKAGES" >> $GITHUB_ENV
        echo "REMOVE_PACKAGES=$REMOVE_PACKAGES" >> $GITHUB_ENV
        
        echo "ÊúÄÁªàËΩØ‰ª∂ÂåÖÂàóË°®:"
        echo "ÂÆâË£Ö: $PACKAGES"
        echo "ÁßªÈô§: $REMOVE_PACKAGES"

    - name: Copy custom files
      run: |
        if [ -d "$GITHUB_WORKSPACE/$CUSTOM_FILES_PATH" ]; then
          echo "Â§çÂà∂Ëá™ÂÆö‰πâÊñá‰ª∂..."
          cp -r "$GITHUB_WORKSPACE/$CUSTOM_FILES_PATH" imagebuilder/
        fi

    - name: Build firmware
      id: build
      run: |
        cd imagebuilder
        
        # ÊòæÁ§∫ÊûÑÂª∫ÁéØÂ¢É‰ø°ÊÅØ
        echo "=== ÊûÑÂª∫ÁéØÂ¢É‰ø°ÊÅØ ==="
        pwd
        ls -la
        df -h
        
        # ÊòæÁ§∫ËΩØ‰ª∂ÂåÖ‰ø°ÊÅØ
        echo "=== ËΩØ‰ª∂ÂåÖ‰ø°ÊÅØ ==="
        echo "ÂÆâË£ÖËΩØ‰ª∂ÂåÖ: [$PACKAGES]"
        echo "ÁßªÈô§ËΩØ‰ª∂ÂåÖ: [$REMOVE_PACKAGES]"
        
        # ‰ΩøÁî®ÊúÄÂü∫Á°ÄÁöÑÊûÑÂª∫ÊñπÂºè
        echo "=== ÂºÄÂßãÊûÑÂª∫Âõ∫‰ª∂ ==="
        set -x  # ÂêØÁî®ÂëΩ‰ª§Ë∑üË∏™
        
        # ÂÖàÂ∞ùËØï‰∏çÂ∏¶‰ªª‰ΩïËá™ÂÆö‰πâËΩØ‰ª∂ÂåÖÁöÑÊûÑÂª∫
        make image PROFILE=generic || {
          echo "Âü∫Á°ÄÊûÑÂª∫Â§±Ë¥•ÔºåÂ∞ùËØïÊ∏ÖÁêÜÂêéÈáçËØï..."
          make clean
          make image PROFILE=generic || exit 1
        }
        
        set +x  # ÂÖ≥Èó≠ÂëΩ‰ª§Ë∑üË∏™
        
        echo "status=success" >> $GITHUB_OUTPUT
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Organize files
      id: organize
      if: steps.build.outputs.status == 'success' && !cancelled()
      run: |
        cd imagebuilder/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT
        
        # ÊòæÁ§∫ÁîüÊàêÁöÑÊñá‰ª∂
        echo "ÁîüÊàêÁöÑÂõ∫‰ª∂Êñá‰ª∂:"
        ls -la

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: ImmortalWrt_firmware${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        touch release.txt
        echo "üì¶ ImmortalWrt x86/64 Âõ∫‰ª∂" >> release.txt
        echo "üîß ÊûÑÂª∫Êó∂Èó¥: $(date)" >> release.txt
        echo "üéØ Âü∫‰∫é ImageBuilder Âø´ÈÄüÊûÑÂª∫" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware to release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: Delete workflow runs
      uses: GitRML/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 3

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.1.0
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}